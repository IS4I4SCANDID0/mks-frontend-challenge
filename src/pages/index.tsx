import Head from "next/head";
import { Montserrat } from "next/font/google";
import { useQuery } from "@tanstack/react-query";
import api from "@/services/api";
import { GetServerSideProps, NextPage } from "next";
import { NextFont } from "next/dist/compiled/@next/font";
import { ProductCard } from "@/components/ProductCard/productCard";
import { Header } from "@/components/Header/header";
import { Footer } from "@/components/Footer/footer";
import { useState } from "react";
import { LoadingComponent } from "@/components/Loading/loading";

export const montserrat: NextFont = Montserrat({ 
  subsets: ["latin"], 
  weight: ["100", "200", "300", "500","600"] 
});

// const getProducts = async ():Promise<IProduct[]> => {
//   const { data } = await api.get<IProduct[]>("/products?page=1&rows=5&sortBy=id&orderBy=ASC");
//   // console.log('1 sou o data',data)

//   return data
// }

const Home: NextPage<IStaticProps> = ({ products: staticProducts }): JSX.Element => {
  // const { data: clientProducts, isLoading } = useQuery<IProduct[]>({
  //   queryKey: ['products'],
  //   queryFn: getProducts,
  //   initialData: staticProducts.products,
  // });

  // const shopProducts = clientProducts || staticProducts
  const [isLoading, setIsLoading] = useState<boolean>(true)

  if(staticProducts) {
    setTimeout(() => {
      setIsLoading(false)
    },2500)
  }

  return (
    <>
      <Head>
        <title>Desafio frontend</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header />
      <main className="mainContainer">
        <ul>
          {isLoading ? (
            <LoadingComponent />
          ) : (   
            staticProducts.products.map((product: IProduct) => 
              <ProductCard key={product.id} product={product}/>
            )   
          )}
        </ul>
      </main>
      <Footer />
    </>
  );
}

export const getStaticProps: GetServerSideProps = async () => {
  const response = await api.get<IProduct[]>("/products?page=1&rows=5&sortBy=id&orderBy=ASC");
  const products = response.data
  // const products = await getProducts()

  return {
    props : {
      products
    },
    revalidate: 60 * 60 * 1000 
  }
}

export default Home